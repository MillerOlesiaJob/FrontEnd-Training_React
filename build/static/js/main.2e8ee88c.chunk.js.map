{"version":3,"sources":["components/Caregories/Categories.js","components/Button/Button.js","components/Answer/Answer.js","components/Question/Question.js","components/Popup/Popup.js","App.js","serviceWorker.js","index.js"],"names":["categoriesList","Categories","props","handleCheckItem","handleUncheckItem","isNewCategories","useState","isChecked","setIsChecked","handleChange","target","checked","id","useEffect","className","map","item","index","key","type","toLowerCase","onChange","htmlFor","Button","onClick","title","Answer","question","console","log","getAnswerBlock","answer","point","getAnswerTable","value","explan","getQuestion","links","link","href","getLinks","Question","questions","setQuestionsOver","usedQuestions","setUsedQuestions","isShowQuestion","setShowQuestion","isShowAnswer","setShowAnswer","currentQuestion","setCurrentQuestion","handleEndQuiz","showRandomQuestion","length","randomIndex","Math","floor","random","includes","prevState","text","Popup","setShowPopup","setNewCategories","pro","dataBase","category","example","App","categories","setCategories","isStartClicked","setStartClicked","isQuestionsOver","isShowPopup","newCategory","prevCategories","unnecessarCategory","filter","array","forEach","questionsCategory","concat","getQuestions","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2e8ee88c.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport './Categories.scss'\r\n\r\nconst categoriesList = [\r\n  'HTML',\r\n  'CSS',\r\n  'JAVASCRIPT',\r\n  'REACT',\r\n  'REDUX',\r\n  'ALL',\r\n];\r\n\r\nconst Categories = (props) => {\r\n  const {handleCheckItem, handleUncheckItem, isNewCategories} = props;\r\n  const [isChecked, setIsChecked] = useState(false);\r\n\r\n  const handleChange = ({target}) => {\r\n    if (target.checked) {\r\n      handleCheckItem(target.id);\r\n    } else {\r\n      handleUncheckItem(target.id);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsChecked(true);\r\n  }, [isNewCategories]);\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='categories-block'>\r\n        <h1 className='categories-block__title'>Categories</h1>\r\n        <ul className='categories-block__list'>\r\n          {categoriesList.map((item, index) => (\r\n            <li key={index} className='categories-block__item categories-item'>\r\n              <input\r\n                type='checkbox'\r\n                id={item.toLowerCase()}\r\n                className='categories-item__check'\r\n                onChange={handleChange}\r\n                checked={isChecked ? true : null}\r\n              />\r\n              <label htmlFor={item.toLowerCase()} className='categories-item__title'>{item}</label>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Categories;","import React from \"react\";\r\nimport './Button.scss';\r\n\r\nconst Button = (props) => {\r\n  const { onClick, title, className } = props;\r\n\r\n  return (\r\n    <button className={className} onClick={onClick}>{title}</button>\r\n  )\r\n};\r\n\r\nexport default Button;","import React from \"react\";\r\nimport './Answer.scss';\r\n\r\nconst Answer = (props) => {\r\n  const {question} = props;\r\n  console.log(question);\r\n\r\n  const getQuestion = () => {\r\n    const answerType = typeof question.answer;\r\n\r\n    switch (answerType) {\r\n      case 'string':\r\n        return question.answer;\r\n      case 'object' :\r\n        return (typeof question.answer[0] === \"object\")\r\n          ? <table><tbody>{getAnswerTable()}</tbody></table>\r\n          : <ul>{getAnswerBlock()}</ul>;\r\n      default:\r\n        console.log(question.answer);\r\n    }\r\n  };\r\n\r\n  const getAnswerBlock = () => question.answer.map((point, index) => {\r\n    return <li key={index}>{point}</li>\r\n  });\r\n\r\n  const getAnswerTable = () => question.answer.map((point, index) => {\r\n    return <tr key={index}><td>{point.value}</td><td>{point.explan}</td></tr>\r\n  });\r\n\r\n  const getLinks = () => {\r\n    if (question.links) {\r\n      return question.links.map((link, index) => <li key={index}><a href={link}>{link}</a></li>)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"answer-block\">\r\n      <div id=\"answerText\" className=\"answer-block__text text\">{getQuestion()}</div>\r\n      <h2 className='title title'>Ссылки</h2>\r\n      <ul>{getLinks()}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Answer;","import React, {useState} from \"react\";\r\nimport './Question.scss';\r\nimport Button from \"../Button/Button\";\r\nimport Answer from \"../Answer/Answer\";\r\n\r\nconst Question = (props) => {\r\n  const { questions, setQuestionsOver } = props;\r\n  const [usedQuestions, setUsedQuestions] = useState([]);\r\nconsole.log(usedQuestions)\r\n  // const [randomIndex, setRandomIndex] = useState(0);\r\n  const [isShowQuestion, setShowQuestion] = useState(false);\r\n  const [isShowAnswer, setShowAnswer] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n\r\n  const showRandomQuestion = () => {\r\n    console.log(usedQuestions.length);\r\n    console.log(questions.length)\r\n    if (usedQuestions.length === questions.length) {\r\n      handleEndQuiz();\r\n      return;\r\n    }\r\n    setShowAnswer(false);\r\n\r\n    const randomIndex = Math.floor(Math.random() * Math.floor(questions.length));\r\n    if (!usedQuestions.includes(randomIndex) ) {\r\n      setUsedQuestions(prevState => ([\r\n        ...prevState,\r\n          randomIndex,\r\n      ]));\r\n      setCurrentQuestion(questions[randomIndex]);\r\n      setShowQuestion(true);\r\n\r\n    } else {\r\n      showRandomQuestion();\r\n    }\r\n  };\r\n\r\n  const handleShowAnswer = () => {\r\n    setShowAnswer(true);\r\n  };\r\n\r\n  const handleEndQuiz = () => {\r\n    setQuestionsOver(true);\r\n    console.log('END');\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className='question-block'>\r\n        <div className=\"question-block__question question\">\r\n         <Button\r\n           title='RANDOM QUESTION'\r\n           className='button button--random'\r\n           onClick={showRandomQuestion}\r\n         />\r\n          {isShowQuestion &&\r\n          <div className=\"questions-text-block\">\r\n            <h2 id=\"questionTitle\" className='question__title title'>{currentQuestion.title}</h2>\r\n            <p id=\"questionText\" className=\"question__text text\">{currentQuestion.text}</p>\r\n            <h2 className='title' onClick={handleShowAnswer}>Ответ</h2>\r\n          </div>\r\n          }\r\n        </div>\r\n        {isShowAnswer && <Answer question={currentQuestion}/>}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Question;","import React from \"react\";\r\nimport './Popup.scss';\r\nconst Popup = (props) => {\r\n  const {setShowPopup, setNewCategories} = props;\r\n\r\n  const handleNewCategories = (pro) => {\r\n    console.log('new');\r\n    setNewCategories(true);\r\n    setShowPopup(false);\r\n  };\r\n\r\n  const handleOldCategories = () => {\r\n    console.log('old');\r\n    setNewCategories(false);\r\n    setShowPopup(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className='wrap-popup '>\r\n      <div className='popup'>\r\n        <p className='popup-title'>Выбрать новые категории?</p>\r\n        <div className='btn-group'>\r\n          <button className='popup-btn button' onClick={handleNewCategories}>ДА</button>\r\n          <button className='popup-btn button' onClick={handleOldCategories}>НЕТ</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Popup;","import React, {useEffect, useState} from 'react';\nimport Categories from \"./components/Caregories/Categories\";\nimport Question from \"./components/Question/Question\";\nimport Button from \"./components/Button/Button\";\nimport Popup from \"./components/Popup/Popup\";\nimport './App.css';\n\nconst dataBase = [\n  //Обработка событий\n  //Циклы\n  //DOM\n  {\n    category: 'javascript',\n    questions: [\n      {\n        title: 'DOM',\n        text: 'Какие параменты принимает insertAdjacentHTML',\n        answer: [\n          'position',\n          'text',\n        ]\n      },\n      {\n        title: 'DOM',\n        text: 'Назовите значения параметра <i>position</i> у insertAdjacentHTML',\n        answer: [\n          'beforebegin: до самого element (до открывающего тега)',\n          'afterbegin: сразу после открывающего тега  element (перед первым потомком)',\n          'beforeend: сразу перед закрывающим тегом element (после последнего потомка)',\n          'afterend: после element (после закрывающего тега)',\n        ]\n      },\n      {\n        title: 'DOM',\n        text: 'Какие опционные свойства есть у метода addEventListener?',\n        answer: [\n          'once: если true, тогда обработчик будет автоматически удалён после выполнения',\n          'capture: фаза, на которой должен сработать обработчик, подробнее об этом будет рассказано в главе Всплытие и погружение.',\n          'passive: если true, то указывает, что обработчик никогда не вызовет preventDefault()',\n        ]\n      },\n      {\n        title: 'Циклы',\n        text: 'Для его используются циклы?',\n        answer: [\n          'Побочные эффекты',\n          'Трансформация',\n          'Фильтры',\n          'Комбинирование элементов',\n          'и т. д.',\n        ],\n        links: [\n          'https://webdevblog.ru/vvedenie-v-funkcionalnoe-programmirovanie-na-javascript/',\n        ]\n      },\n      //Объекты\n      {\n        title: 'Объекты',\n        text: 'Как можно ограничить возможность изменения объекта?',\n        answer: 'Object.freeze()',\n        links: [],\n      },\n      //Замыкание\n      {\n        title: 'Замыкание',\n        text: 'Что такое замыание?',\n        answer: [\n          'Замыкание — это комбинация функции и лексического окружения, в котором эта функция была определена. Другими словами, замыкание дает вам доступ к Scope внешней функции из внутренней функции. В JavaScript замыкания создаются каждый раз при созданиии функции, во время ее создания.',\n          'Простыми словами: Замыкание - это функция внутри другой функции',\n        ],\n        links: [\n          'https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures#:~:text=%D0%97%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D0%B5%20%E2%80%94%20%D1%8D%D1%82%D0%BE%20%D0%BA%D0%BE%D0%BC%D0%B1%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F%20%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8%20%D0%B8,%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8%2C%20%D0%B2%D0%BE%20%D0%B2%D1%80%D0%B5%D0%BC%D1%8F%20%D0%B5%D0%B5%20%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D1%8F.',\n        ],\n      },\n      //Асинхронность\n      {\n        title: 'Асинхронность',\n        text: 'Что такое SetTimeout?',\n        answer: 'Функция браузера (браузерный API). Не входит в спецификацию JS. Вызывается у глобального объекта window. Принимает два парамента: функцию и время, через которое вызовится эта функция в милисекундах',\n        links: [\n          '',\n        ],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Что такое Main Thread?',\n        answer:\n          'Main Thread — это основной поток, где браузер выполняет JS, делает перерисовки, обрабатывает пользовательские действия и многое другое.' +\n          'По сути, это то место, где движок JS интегрирован в браузер.',\n        links: ['https://habr.com/ru/post/461401/'],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Что такое EventLoop?',\n        answer: 'Поток выполнения задач в браузере',\n        links: ['https://learn.javascript.ru/event-loop'],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Как работает EventLoop',\n        answer:\n          'Когда интерпретатор проходит по коду и натыкается на асинхронную операцию, он закидывает ее в браузерный сторонний API,' +\n          'где она ждет указаное количество времени (есть мы говорим про SetTimeout)' +\n          '/ вызова (если это слушатели событий)' +\n          '/ выполение остальных операций интерпретатором (пример Promise).' +\n          'После операция попадает в очередь событий (Callback Queue).' +\n          'Как только интерпретатор выполнит все указаные действия в коде, события из очереди событий по очереди попадают в call stack',\n        links: [''],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Что такое Promise?',\n        answer:\n          'Promise – это специальный объект, который содержит своё состояние.' +\n          'Вначале pending («ожидание»), затем – одно из: fulfilled («выполнено успешно») или rejected («выполнено с ошибкой»).',\n        links: ['https://learn.javascript.ru/promise'],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Что такое Промисификация?',\n        answer: 'Промисификация – это когда берут асинхронную функциональность и делают для неё обёртку, возвращающую промис.',\n        links: ['https://learn.javascript.ru/promise'],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Какую проблему решает Promise?',\n        answer: 'Просимы были введены для избежания CallbackHellа, который подразумевал под собой создания большого количества вложеностей,' +\n          'что приводило к усложнению читабельности кода и трудностям в поддержании данного кода',\n        links: [''],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Назвать внутренние свойства объекта new Promise()?',\n        answer: [\n          'PromiseState – состояние, вначале «pending».',\n          'PromiseResult – результат, при создании значения нет.',\n          'PromiseFulfillReactions – список функций-обработчиков успешного выполнения.',\n          'PromiseRejectReactions – список функций-обработчиков ошибки.'\n        ],\n        links: ['https://learn.javascript.ru/promise'],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Назвать методы для навешивания обработчиков в Promise',\n        answer: [\n          'then - навешивает обработчики на успешный результат или ошибку есть была вызвана функция resolve / reject',\n          'catch – используется для отлавливания ошибок',\n          'finally – выполняется независимо от успеха или ошибки при выполения промиса',\n        ],\n        links: ['https://learn.javascript.ru/promise'],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Назвать статические методы Promise',\n        answer: [\n          'Promise.all(iterable) - Вызов Promise.all(iterable) получает массив (или другой итерируемый объект) промисов и возвращает промис,' +\n          'который ждёт, пока все переданные промисы завершатся, и переходит в состояние «выполнено» с массивом их результатов.',\n          'Promise.race(iterable) – получает итерируемый объект с промисами, которые нужно выполнить, и возвращает новый промис.' +\n          'Но, в отличие от Promise.all, результатом будет только первый успешно выполнившийся промис из списка. Остальные игнорируются.',\n          'Promise.resolve(value) – Вызов Promise.resolve(value) создаёт успешно выполнившийся промис с результатом value.',\n          'Promise.reject(error) – Вызов Promise.reject(error) создаёт уже выполнившийся промис, но не с успешным результатом, а с ошибкой error.',\n        ],\n        links: ['https://learn.javascript.ru/promise'],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Что такое fetch?',\n        answer:\n          'Fetch - новый встроенный метод для AJAX-запросов, призванный заменить XMLHttpRequest. Он гораздо мощнее, чем httpGet.' +\n          'Этот метод использует промисы.',\n        links: ['https://learn.javascript.ru/promise'],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Что такое Чейнинг?',\n        answer:\n          '«Чейнинг» (chaining) - возможность строить асинхронные цепочки из промисов – пожалуй,' +\n          'основная причина, из-за которой существуют и активно используются промисы.' +\n          'Используется для передачи результата от одного обработчика к другому',\n        links: ['https://learn.javascript.ru/promise'],\n      },\n      {\n        title: 'Асинхронность',\n        text: 'Как работает Async Await?',\n        answer:\n          'Cпециальный синтаксис для работы с промисами. По сути, это - синтаксический сахар, который позволяет более комфортно работать с промисами. ' +\n          'Начнём с ключевого слова async. Оно ставится перед функцией.' +\n          'У слова async один простой смысл: эта функция всегда возвращает промис.' +\n          'Ключевое слово await заставит интерпретатор JavaScript ждать до тех пор, пока промис справа от await не выполнится.' +\n          'После чего оно вернёт его результат, и выполнение кода продолжится.' +\n          'Если мы попробуем использовать await внутри функции, объявленной без async, получим синтаксическую ошибку.' +\n          'Результат выполнения промиса справа от await можно записать в переменную',\n        links: ['https://learn.javascript.ru/async-await'],\n      },\n      // Запросы на сервер\n      {\n        title: 'Асинхронность. Запросы на сервер',\n        text: 'Назовите способы создания запросов на сервер',\n        answer: ['XHR (XMLHttpRequest)', 'fetch'],\n        links: [''],\n      },\n      {\n        title: 'Асинхронность. Запросы на сервер',\n        text: 'Что такое AJAX?',\n        answer:\n          'Ajax означает Асинхронный JavaScript и XML. В основе технологии лежит использование нестандартного объекта XMLHttpRequest,' +\n          'необходимого для взаимодействия со скриптами на стороне сервера. Объект может как отправлять, так и получать информацию в различных форматах' +\n          'включая XML, HTML и даже текстовые файлы. Самое привлекательное в Ajax — это его асинхронный принцип работы.' +\n          'С помощью этой технологии можно осуществлять взаимодействие с сервером без необходимости перезагрузки страницы.' +\n          'Это позволяет обновлять содержимое страницы частично, в зависимости от действий пользователя.',\n        links: ['https://developer.mozilla.org/ru/docs/Web/Guide/AJAX/%D0%A1_%D1%87%D0%B5%D0%B3%D0%BE_%D0%BD%D0%B0%D1%87%D0%B0%D1%82%D1%8C'],\n      },\n      {\n        title: 'Асинхронность. Запросы на сервер',\n        text: 'Как работать с XHR?',\n        answer: [\n          'const xhr = new XMLHttpRequest()',\n          'xhr.open(метод, url)',\n          'xhr.responseType = \"js\"',\n          'xhr.setRequestHeader(name, value) - для POST запросов',\n          'xhr.onload = () => xhr.response (можно работать с результатами запроса)',\n          'xhr.onerror = () => xhr.response (действия при ошибке)',\n          'xhr.send() - при GET запросах',\n          'xhr.send(JSON.stringify(body)) - при POST запросах, body - информация для создания данных'\n        ],\n        links: [''],\n      },\n      {\n        title: 'Асинхронность. Запросы на сервер',\n        text: 'Как работать с fetch?',\n        answer: [\n          'GET:',\n          'fetch(url) -  по умолчания выполняется метод GET',\n          ' .then(response => response.json())',\n          ' ',\n          'POST:',\n          'fetch(url, {method, body = {}, headers = {name: value}})',\n        ],\n        links: [''],\n      },\n      {\n        title: 'Асинхронность. Запросы на сервер',\n        text: 'Назвать методы XHR запросов',\n        answer: [\n          'get() - получение данных',\n          'post() - для создания данных',\n          'delete() - для удаления данных',\n          'put() - для полного обновления элемента',\n          'patch() - для частичного обновления элемента'\n        ],\n        links: [''],\n      },\n      //Функциональное программирование\n      {\n        title: 'Функционалльное программирование',\n        text: 'Что такое композиция функций?',\n        answer: 'Композиция это техника, позволяющая вам взять две или больше простых функций и объединить их в одну, более сложную функцию, выполняющую подфункции в логическом порядке с любыми данными',\n        links: [\n          'http://prgssr.ru/development/kompoziciya-funkcij.html',\n        ],\n      },\n      {\n        title: 'Функционалльное программирование',\n        text: 'Что такое каррирование?',\n        answer: 'Каррирование – это процесс получения функции, которая принимает n аргументов, и превращения ее в n функций, каждая из которых принимает один аргумент.',\n        links: [],\n      },\n      {\n        title: 'Функциональное программирование',\n        text: 'Дать определение функции высшего порядка',\n        answer: '<b>Функция высшего порядка</b> - это функция, которая возвращает функцию или принимает другую функцию в качестве параметра. Самым явным примером функции высшего порядка является <b>addEventListener</b>',\n        links: [\n          'https://habr.com/ru/post/154105/'\n        ]\n      },\n      {\n        title: 'Функциональное программирование',\n        text: 'Назовите примеры побочных эффектов',\n        answer: [\n          'Видоизменение входных параметров',\n          'console.log',\n          'HTTP вызовы (AJAX/fetch)',\n          'Изменение в файловой системе',\n          'Запросы DOM',\n        ],\n        links: [\n          'https://habr.com/ru/post/437512/'\n        ]\n      },\n      {\n        title: 'Функциональное программирование',\n        text: 'Что такое чистая функция?',\n        answer: 'Чистая функция - \"строительный блок\" функционального програмирования, которая каждый раз возвращает одинаковый результат, когда она вызывается с тем же набором аргументов и не вызывает побочных эффектов. Из преимуществ можно выделить простоту в понимании и тестировании.',\n        links: [\n          'https://habr.com/ru/post/437512/'\n        ]\n      },\n      {\n        title: 'Функциональное программирование',\n        text: 'Назвать принципы функционального программирования',\n        answer: [\n          'Использование чистых функций',\n          'Копирование, а не переопределение переменных',\n          'Для объявления переменных использовать только CONST'\n        ],\n        links: [\n          'https://habr.com/ru/post/154105/',\n          'https://webdevblog.ru/vvedenie-v-funkcionalnoe-programmirovanie-na-javascript/',\n        ]\n      },\n      //Методы массивов\n      {\n        title: 'Методы массивов',\n        text: 'Назвать известные методы массивов',\n        answer: '',\n        links: [\n          'https://habr.com/ru/company/ruvds/blog/413169/',\n        ]\n      },\n      //Контект\n      {\n        title: 'Контект',\n        text: 'Что такое контекст?',\n        answer: 'Контекст выполнения функции — это одно из фундаментальных понятий в JavaScript. Контекстом еще часто называют значение переменной this внутри функции',\n        links: ['https://proweb63.ru/help/js/kontekst-vyipolneniya-funkczii-v-javascript#:~:text=%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%BA%D1%81%D1%82%20%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8%20%E2%80%94%20%D1%8D%D1%82%D0%BE%20%D0%BE%D0%B4%D0%BD%D0%BE,%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BF%D0%B5%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%BE%D0%B9%20this%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8.&text=%D0%9E%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C%20%D0%B2%D0%B8%D0%B4%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D0%B8%20%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F%D0%B5%D1%82%20%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%20%D0%BA,%D1%8F%D0%B2%D0%BB%D1%8F%D0%B5%D1%82%D1%81%D1%8F%20%D1%83%D0%BD%D0%B8%D0%BA%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9%20%D0%B4%D0%BB%D1%8F%20%D0%BA%D0%B0%D0%B6%D0%B4%D0%BE%D0%B3%D0%BE%20%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%B0.'],\n      },\n      {\n        title: 'Контект',\n        text: 'Назвать методы работы с контектстом',\n        answer: 'BIND, CALL, APPLY',\n        links: [''],\n      },\n      {\n        title: 'Контект',\n        text: 'Какая разница между BIND, CALL, APPLY',\n        answer: [\n          'BIND - привязывает контект, но не вызывает функцию',\n          'CALL - привязывает контект и сразу вызывает функцию с этим контекстом',\n          'APPLY - требует указания двух параментов(контект и параменты для новосозданой функции) и сразу вызывает функцию'],\n        links: [''],\n      },\n      // ООП\n      {\n        title: 'Принципы ООП',\n        text: 'Назвать принципы ООП',\n        answer: [\n          'Абстракция',\n          'Инкапсуляция',\n          'Наследование',\n          'Полиморфизм'\n        ],\n      },\n      {\n        title: 'Принципы ООП',\n        text: 'Объяснить принцип Инкапсуляции',\n        answer: 'Инкапсуляция — это контроль доступа к полям и методам объекта. Под контролем доступа подразумевается не только можно/неможно, но и различные валидации, подгрузки, вычисления и прочее динамическое поведение.',\n        links: ['https://habr.com/ru/post/463125/'],\n      },\n      {\n        title: 'Принципы ООП',\n        text: 'Объяснить принцип Наследования',\n        answer: 'Наследование — это механизм системы, который позволяет, как бы парадоксально это не звучало, наследовать одними классами свойства и поведение других классов для дальнейшего расширения или модификации',\n        links: ['https://habr.com/ru/post/463125/'],\n      },\n      {\n        title: 'Принципы ООП',\n        text: 'Объяснить принцип Полиморфизма',\n        answer: 'Полиморфизм — способность метода работать с разными данным. При работе с одним и тем же методом (функцией) разные сущности по-разному могут его использовать. Возможность применения в данном контексте свойств и методов, но внутри эти методы меняются для каждой сущности. Реализация задач одной и той же идеи разными способами',\n        links: ['https://habr.com/ru/post/463125/'],\n      },\n      {\n        title: 'Принципы ООП',\n        text: 'Объяснить принцип Абстракции',\n        answer: 'Абстракция – построение (разработка) модели, оставляем только важные параметры (свойства, методы). (На этапе разработки документации кода это особенно важно).',\n        links: ['https://habr.com/ru/post/463125/'],\n      },\n      {\n        title: 'ООП',\n        text: 'Объяснить, что такое ООП',\n        answer: 'Объектно-ориентированное программирование (в дальнейшем ООП) — парадигма программирования, в которой основными концепциями являются понятия объектов и классов.В центре ООП находится понятие объекта.',\n        links: [\n          'https://devcolibri.com/%D1%87%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-%D0%BE%D0%BE%D0%BF-%D0%B8-%D1%81-%D1%87%D0%B5%D0%BC-%D0%B5%D0%B3%D0%BE-%D0%B5%D0%B4%D1%8F%D1%82/',\n          'https://habr.com/ru/post/463125/',\n        ]\n      },\n    ],\n  },\n  //Паттерны програмирования\n  //Функции\n  //Классы\n  //Прототипы\n  //СSS\n  {\n    category: 'css',\n    questions: [\n      {\n        title: 'Блочная модель',\n        text: 'Что под собой подразумевает блочная модель?',\n        answer: 'Блочная модель CSS — одна из основ веб-дизайна, которая в дальнейшем помогает лучше кастомизировать страницы. В соответствии с концепцией блочной модели, каждый элемент на странице представляет собой прямоугольный блок и может иметь ширину, высоту, поля, границы и отступы. Это стоит повторить: Каждый элемент на странице представляет собой прямоугольный блок.',\n        links: [\n          'https://html5book.ru/css-blochnaya-model/',\n          'https://developer.mozilla.org/ru/docs/Web/CSS/box_model',\n          'https://webref.ru/layout/learn-html-css/box-model'\n        ]\n      },\n      {\n        title: 'Вес селекторов',\n        text: 'Назвать, чему равен вес селокторов',\n        answer: [\n          {\n            value: '1',\n            explan: 'селектор тега'\n          },\n          {\n            value: '10',\n            explan: 'Селектор класса'\n          },\n          {\n            value: '100',\n            explan: 'Серектор id'\n          },\n          {\n            value: '10',\n            explan: 'Селектор аттрибута'\n          },\n          {\n            value: '1000',\n            explan: 'Inline стили'\n          }\n        ],\n      },\n      {\n        title: 'Селекторы',\n        text: 'Назвать, какие селекторы существуют',\n        answer: [\n          '*all',\n          '#id',\n          '.class',\n          'контекстный селектор (X Y - стили применятся только к Y, которые ВНУТРИ X)', 'селектор тега (X)',\n          'псевдоклассы',\n          'асевдоэлементы',\n          'соседний селектор (X + Y - стили применятся только к тем Y, которые следуют СРАЗУ за X)',\n          'прямой потомок (X > Y - стили применятся только к тем Y, которые являются первоуровневыми потомками X)',\n          'менее строкий Соседний селектор (X ~ Y - выберит ВСЕ Y, которые следуют за X)',\n          'селектор аттрибута (можно указать точное значение аттрибота, например ссылку или только часть через a[href*=`linkPart`], можно указать ^ - начало строки и $ - конец строки)',\n        ],\n        links: ['https://code.tutsplus.com/ru/tutorials/the-30-css-explans-you-must-memorize--net-16048']\n      },\n      {\n        title: 'Псевдоелементы',\n        text: 'Назвать известные псевдоэлементы',\n        answer: [\n          {\n            value: 'p::first-line',\n            explan: 'Выберем первую строку параграфа'\n          },\n          {\n            value: 'p::first-letter',\n            explan: 'Выберем первую букву параграфа'\n          },\n          {\n            value: '',\n            explan: ''\n          }\n        ],\n        links: [],\n      },\n      {\n        title: 'Псевдоклассы',\n        text: 'Назвать известные псевдоклассы',\n        answer: [\n          {\n            value: 'X:first-of-type',\n            explan: 'Выбирает первого наследника указанного типа'\n          },\n          {\n            value: 'X:only-of-type',\n            explan: 'Выберет дочерний элемент, только если он единственный у родителя.'\n          },\n          {\n            value: 'X:only-child',\n            explan: 'позволяет выбрать элемент, являющийся единственным наследником своего родителя',\n            example: '../images/only-child.jpg',\n          },\n          {\n            value: 'X:last-child',\n            explan: 'Выберет последний дочерний элемент.',\n          },\n          {\n            value: 'first-child',\n            explan: 'Выберет только первый дочерний элемент.',\n          },\n          {\n            value: 'X:nth-last-of-type(n)',\n            explan: 'Выберет тоько последний элемент указанного типа',\n          },\n          {\n            value: 'X:nth-of-type(n)',\n            explan: 'Выберет элемент указанного типа по номеру',\n          },\n          {\n            value: 'X:nth-last-child(n)',\n            explan: 'Выберет дочерний элемент с конца',\n          },\n          {\n            value: 'X:nth-child(n)',\n            explan: 'Выберет дочерний элемент по указаному порядковому номеру',\n          },\n          {\n            value: 'X:not(explan)',\n            explan: 'Отрицание',\n          },\n          {\n            value: 'X:hover',\n            explan: 'Псевдокласс пользовательского действия',\n          },\n          {\n            value: 'X:after',\n            explan: 'Позволяют сгенерировать контент после указанного элемента.',\n          },\n          {\n            value: 'X:before',\n            explan: 'Позволяют сгенерировать контент перед указанным элементом.',\n          },\n          {\n            value: 'X:checked',\n            explan: 'Выберет только отмеченные элементы пользовательского интерфейса.',\n          },\n          {\n            value: 'X:link',\n            explan: 'Для стилизации ссылок, на которые пользователь ещё не нажимал.',\n          },\n          {\n            value: 'X:visited',\n            explan: 'Для стилизации только тех ссылок, на которые пользователь нажал.',\n          }\n        ],\n      },\n      {\n        title: 'Анимация CSS',\n        text: 'Как создавать анимацию?',\n        answer: [\n          'CSS transitions - позволяют сделать изменения CSS-свойств плавно и в течение некоторого времени.',\n          'CSS animations - позволяют делать более сложные анимации, нежели CSS transitions. Весь секрет в @keyframes.' +\n          'Правило @keyframes позволяет создавать анимацию с помощью набора ключевых кадров,' +\n          'то есть описывает состояние объекта в определенный момент времени.',\n          'Motion Path Module CSS - позволяет создавать движение объектов по контуру через специальное свойство motion-path.' +\n          'Раньше такую анимацию можно было сделать только с помощью SVG или сложных скриптов.'\n        ],\n        links: ['https://stfalcon.com/ru/blog/post/animation-css']\n      },\n      {\n        title: 'Анимация CSS',\n        text: 'Назвать свойства для работы с Motion Path Module CSS?',\n        answer: [\n          'motion-path — это свойство позволяет указать точки(координаты) по которым будет двигаться объект. Синтаксис такой же как у SVG-атрибута path.',\n          'motion-offset — это свойство приводит объект в движение от начальной точки до конечной.',\n          'motion-rotation — это свойство позволяет указать, какой стороной вперед будет двигаться объект.'\n        ],\n        links: ['https://stfalcon.com/ru/blog/post/animation-css']\n      },\n      {\n        title: 'Анимация CSS',\n        text: 'Назвать свойства для работы с CSS animations?',\n        answer: [\n          'animation-iteration-count — задаёт количество повторов анимации, значение по умолчанию 1.' +\n          'Значение infinite означает, что анимация будет проигрываться бесконечно.',\n          'animation-direction — задаёт направление анимации.',\n          'animation-play-state — данное свойство управляет остановкой и прогрыванием анимации.' +\n          'Есть два значения, running (анимация проигрывается, по умолчанию) и paused (останавливает анимацию).',\n          'animation-fill-mode — устанавливает, какие CSS-свойства будут приминены к объекту до или после анимации',\n          'animation-duration — задаёт значение продолжительности анимации, время можно указывать в секундах или миллисекундах.',\n          'animation-timing-function — временная функция, указывает точки ускорения и замедления за определенный период времени' +\n          'для контроля изменения скорости анимации.',\n          'animation-delay — задаёт задержку времени до начала анимации, можно указывать в секундах или миллисекундах.',\n        ],\n        links: ['https://stfalcon.com/ru/blog/post/animation-css']\n      },\n      {\n        title: 'Анимация CSS',\n        text: 'Назвать свойства для работы с CSS transitions?',\n        answer: [\n          'transition-property — указывает список свойств, которые будут анимироваться',\n          'transition-duration — задаёт значение продолжительности анимации, время можно указывать в секундах или миллисекундах.',\n          'transition-timing-function — временная функция, указывает точки ускорения и замедления за определенный период времени' +\n          'для контроля изменения скорости анимации.',\n          'transition-delay — задаёт задержку времени до начала анимации, можно указывать в секундах или миллисекундах.',\n          'transition — это общее свойство, которое позволяет перечислить первые четыре свойства в порядке: property, duration, timing-function, delay.'\n        ],\n        links: ['https://stfalcon.com/ru/blog/post/animation-css']\n      },\n    ],\n  },\n  //HTML\n  {\n    category: 'html',\n    questions: [\n      {\n        title: 'HTML5. Семантическая верстка',\n        text:'Назвать известные семантические теги',\n        answer: [\n          '<article> <b>article</b></b> - отпределяет независимый, самодостаточный контент',\n          '<aside> <b> aside</b> -  определяет некий контент, находящийся в стороне от контента, внутри которого он расположен (как боковой блок страницы, \"сайдбар\")',\n          '<figcaption> <b>figcaption</b> - добавление визуального пояснения к изображению.',\n          '<figure> <b>figure</b> - используется для группирования различных самодостаточных элементов</b> - иллюстраций, диаграмм, фотографий, листингов кода и т.д',\n          '<footer> <b>footer</b> - определение \"подвала\" документа или раздела',\n          '<header> <b>header</b> - определение заголовочной части документа или раздела (\"шапки\")',\n          '<main> <b>main</b> - определяет основной контент документа. На стронице может быть только один',\n          '<mark> <b>mark</b> - определяет маркированный/подсвеченный текст',\n          '<nav> <b>nav</b> - определяет набор ссылок навигации. Предназначен только для основного влока навигационных ссылок',\n          '<section> <b>section</b> - определяет раздел в документе',\n          '<time> <b>time</b> - определяет дату/время',\n          '<summary> <b>summary</b> - определяет видимый заголовок элемента <details>',\n          '<details> <b>details</b> - определяет дополнительную информацию, которую пользователь может открывать или закрывать',\n        ],\n        links: [\n          'https://msiter.ru/tutorials/html5/semantic_elements'\n        ]\n      },\n    ]\n  }\n];\n\nfunction App() {\n  const [categories, setCategories] = useState([]);\n  console.log(categories)\n  const [isStartClicked, setStartClicked] = useState(false);\n  const [isQuestionsOver, setQuestionsOver] = useState(false);\n  const [isShowPopup, setShowPopup] = useState(false);\n  const [isNewCategories, setNewCategories] = useState(false);\n\n  const handleCheckItem = (newCategory) => {\n    console.log('newCategory ', newCategory)\n    setCategories((prevCategories) => ([\n      ...prevCategories,\n      newCategory,\n    ]));\n  };\n\n  const handleUncheckItem = (unnecessarCategory) => {\n    setCategories((prevCategories) => ([\n      ...prevCategories.filter(category => category !== unnecessarCategory)\n    ]));\n  };\n\n  const startLearning = () => {\n    setStartClicked(true);\n  };\n\n  const againLearning = () => {\n    setShowPopup(true);\n  };\n\n  const getQuestions = () => {\n    let array = [];\n     categories.forEach(category => {\n      dataBase.forEach(questionsCategory => {\n        if (questionsCategory.category === category) {\n          array = array.concat(questionsCategory.questions);\n        }\n      });\n    });\n     return array;\n  };\n\n  return (\n    <div className=\"main-container\">\n      <Categories\n        handleCheckItem={handleCheckItem}\n        handleUncheckItem={handleUncheckItem}\n        isNewCategories={isNewCategories}\n      />\n      {isQuestionsOver && <p className='title__warning'>ВЫ ОТВЕТИЛИ НА ВСЕ ВОПРОСЫ</p>}\n      <Button\n        onClick={isQuestionsOver ? againLearning : startLearning}\n        title={isQuestionsOver ? 'TRAIN AGAIN' : 'START'}\n        //TODO add class for unable button\n        className='button button--start'\n      />\n      {isStartClicked &&\n        <Question questions={getQuestions()} setQuestionsOver={setQuestionsOver}/>\n      }\n      {isShowPopup &&\n      <Popup setShowPopup={setShowPopup} setNewCategories={setNewCategories}/>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}